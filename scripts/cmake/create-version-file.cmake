file(STRINGS ${CMAKE_SOURCE_DIR}/version.txt VERSION_CONTENTS)
list(GET VERSION_CONTENTS 0 FIRMWARE_MAJOR_VERSION)
list(GET VERSION_CONTENTS 1 FIRMWARE_MINOR_VERSION)
list(GET VERSION_CONTENTS 2 FIRMWARE_PATCH_VERSION)
list(GET VERSION_CONTENTS 3 FIRMWARE_SUFFIX)
set(FIRMWARE_VERSION ${FIRMWARE_MAJOR_VERSION}.${FIRMWARE_MINOR_VERSION}.${FIRMWARE_PATCH_VERSION})
message(STATUS "Version (${PROJECT_NAME}): ${FIRMWARE_VERSION}")

set(VERSION_FILE ${CMAKE_BINARY_DIR}/version.h.tmp)
file(WRITE ${VERSION_FILE} "// This file is automatically generated, do not edit manually\n")
file(APPEND ${VERSION_FILE} "#include \"Arduino.h\"\n")
file(APPEND ${VERSION_FILE} "const uint32_t mtMajor = ${FIRMWARE_MAJOR_VERSION};\n")
file(APPEND ${VERSION_FILE} "const uint32_t mtMinor = ${FIRMWARE_MINOR_VERSION};\n")
file(APPEND ${VERSION_FILE} "const uint32_t mtPatch = ${FIRMWARE_PATCH_VERSION};\n")
file(APPEND ${VERSION_FILE} "const String mtSuffix = \"${FIRMWARE_SUFFIX}\";\n")
file(APPEND ${VERSION_FILE} "const String mtVersion = \"${FIRMWARE_VERSION}\";\n")

set(UPDATE_VERSION_FILE 0)
if(EXISTS ${CMAKE_SOURCE_DIR}/version.h)
    execute_process(
        COMMAND ${CMAKE_COMMAND} -E 
            compare_files ${CMAKE_SOURCE_DIR}/version.h ${CMAKE_BINARY_DIR}/version.h.tmp
            RESULT_VARIABLE COMPARE_RESULT
    )
    if(COMPARE_RESULT EQUAL 0)
        message("Version not changed, so version file not updated.")
    elseif(COMPARE_RESULT EQUAL 1)
        message("Version changed, so version file updated.")
        set(UPDATE_VERSION_FILE 1)
    else()
        message("Could not determine if version changed, so version file not updated.")
    endif()
else()
    message("Version file created.")
    set(UPDATE_VERSION_FILE 1)
endif()

if(UPDATE_VERSION_FILE EQUAL 1)
    file(RENAME ${CMAKE_BINARY_DIR}/version.h.tmp ${CMAKE_BINARY_DIR}/version.h)
    file(COPY ${CMAKE_BINARY_DIR}/version.h DESTINATION ${CMAKE_SOURCE_DIR}/src)
endif()